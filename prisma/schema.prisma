generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum VehicleType {
  TRUCK
  VAN
  CAR
  MOTORCYCLE
  BUS
}

enum VehicleStatus {
  AVAILABLE
  IN_MAINTENANCE
  IN_OPERATION
  DECOMMISSIONED
}

enum DriverStatus {
  ACTIVE
  INACTIVE
  ON_LEAVE
  SUSPENDED
}

enum RouteStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  PREDICTIVE
}

enum MaintenanceStatus {
  SCHEDULED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String?
  googleId  String?  @unique
  role      Role     @default(USER)
  drivers   Driver[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Driver {
  id            String       @id @default(uuid())
  name          String
  phone         String       @unique
  licenseNumber String       @unique
  licenseType   String
  licenseExpiry DateTime
  userId        String
  user          User         @relation(fields: [userId], references: [id])
  vehicles      Vehicle[]
  locations     Location[]
  routes        Route[]
  status        DriverStatus @default(ACTIVE)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model Vehicle {
  id           String        @id @default(uuid())
  plate        String        @unique
  model        String
  year         Int
  type         VehicleType
  status       VehicleStatus @default(AVAILABLE)
  driverId     String?
  driver       Driver?       @relation(fields: [driverId], references: [id])
  locations    Location[]
  maintenances Maintenance[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  Route        Route[]
}

model Location {
  id        String   @id @default(uuid())
  latitude  Float
  longitude Float
  speed     Float?
  accuracy  Float?
  timestamp DateTime @default(now())
  driverId  String
  driver    Driver   @relation(fields: [driverId], references: [id])
  vehicleId String
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  routeId   String?
  route     Route?   @relation(fields: [routeId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([driverId])
  @@index([vehicleId])
  @@index([timestamp])
}

model Route {
  id          String      @id @default(uuid())
  origin      String
  destination String
  startTime   DateTime
  endTime     DateTime?
  distance    Float?
  driverId    String
  driver      Driver      @relation(fields: [driverId], references: [id])
  vehicleId   String
  vehicle     Vehicle     @relation(fields: [vehicleId], references: [id])
  waypoints   Location[]
  status      RouteStatus @default(PLANNED)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Maintenance {
  id          String            @id @default(uuid())
  type        MaintenanceType
  description String
  cost        Float?
  vehicleId   String
  vehicle     Vehicle           @relation(fields: [vehicleId], references: [id])
  startDate   DateTime
  endDate     DateTime?
  status      MaintenanceStatus @default(SCHEDULED)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
}
